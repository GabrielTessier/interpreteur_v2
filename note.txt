
! fleche haut
¡ flèche bas



s(!bool)	-> code(¡[]!bool) EOF_TOK  [EOF_TOK, LACCOLADE, TYPE, VARIABLE, NOMBRE, INTERROGATION, SI, PRINT]

code(¡sc!bool)  -> sm_commande(¡nsc!b1) code(¡nsc!b2)  {nsc = sc:[], bool = b1 && b2} [LACCOLADE, TYPE, VARIABLE, NOMBRE, INTERROGATION, SI, PRINT]
		 | epsilon          [EOF_TOK, RACCOLADE]

sm_commande(¡sc!bool)	-> commande(¡sc!bool)  {} [TYPE, VARIABLE, NOMBRE, INTERROGATION, SI, PRINT]
		        | LACCOLADE code(¡sc!bool) RACCOLADE  {} [LACCOLADE]

commande(¡sc!bool)	-> creation_var(¡sc!bool)  {} [TYPE]
		        | expr(¡sc!bool) POINT_VIRGULE  {} [VARIABLE, NOMBRE]
		        | condition(¡sc!var,bool)  {} POINT_VIRGULE [INTERROGATION]
		        | si(¡sc!bool)  {} [SI]
		        | PRINT LPARENTHESE print(¡sc!bool) RPARENTHESE POINT_VIRGULE  {} [PRINT]

print(¡sc!bool)	-> expr(¡sc!var,bool)  {print var} [VARIABLE, NOMBRE]
		 | condition(¡sc!var,bool)  {print var} [INTERROGATION]

creation_var(¡sc!bool)	-> TYPE(!t) VARIABLE(!var) crea_var_2(¡sc,var!bool)  {type var = t, var pas dans sc (ajout var sc)} [TYPE]
crea_var_2(¡sc,var!bool)-> AFFECTATION expr(¡sc!var2,bool) POINT_VIRGULE  {type var = var2, var-val := var2-val} [AFFECTATION]
		         | POINT_VIRGULE                          [POINT_VIRGULE]

expr(¡sc!var,bool)	-> VARIABLE(!var2) expr_var(¡sc,var2!var,bool)  {} [VARIABLE]
		         | NOMBRE(!var)  {bool = true} [NOMBRE]
expr_var(¡sc,vari!var,bool)	-> var_aff(¡sc,vari!var,bool)  {} [AFFECTATION]
		                 | epsilon      [POINT_VIRGULE, RPARENTHESE]
var_aff(¡sc,vari!var,bool)	-> AFFECTATION expr(¡sc!var2,bool)  {type vari = var2, vari-val := var2-val, var := var2} [AFFECTATION]

condition(¡sc!var,bool)	-> INTERROGATION LPARENTHESE condition_2(¡sc!boolr,bool) RPARENTHESE  {creer var avec val = boolr} [INTERROGATION]
condition_2(¡sc!boolr,bool) -> et_condition(¡sc!boolr2,bool2) ou_loop(¡sc!boolr3,bool3)  {bool := bool2 && bool3, boolr := boolr2 || boolr3} [VRAI, FAUX, VARIABLE, LPARENTHESE]
ou_loop(¡sc!boolr,bool)     -> OU et_condition(¡sc!boolr2,bool2) ou_loop(¡sc!boolr3,bool3)  {boolr := boolr2 || boolr3} [OU]
                            | epsilon                    [RPARENTHESE]
et_condition(¡sc!boolr,bool)-> ou_condition(¡sc!boolr2,bool2) et_loop(¡sc!boolr3,bool3)  {boolr := boolr2 && boolr3} [VRAI, FAUX, VARIABLE, LPARENTHESE]
et_loop(¡sc!boolr,bool)     -> ET ou_condition(¡sc!boolr2,bool2) et_loop(¡sc!boolr3,bool3)  {boolr := boolr2 && boolr3}    [ET]
                            | epsilon                    [OU, RPARENTHESE]
ou_condition(¡sc!boolr,bool)-> VRAI     {boolr := true}  [VRAI]
		            | FAUX      {boolr := false} [FAUX]
		            | VARIABLE(!var) comp(¡sc,var!boolr,bool)  {} [VARIABLE]
		            | LPARENTHESE condition_2(¡sc!boolr,bool) RPARENTHESE  {} [LPARENTHESE]
comp(¡sc,var!boolr,bool)    -> COMPARAISON VARIABLE(!var2)  {faire comparaison var var2} [COMPARAISON]
		            | epsilon  {si type var = bool alors renvoier le bool sinon erreur type} [ET, OU, RPARENTHESE]

si(¡sc!bool) 	-> SI condition(¡sc!var,bool) sm_commande(¡sc!bool) sinon  {si var-val est vrai alors faire si sinon faire sinon} [SI]
sinon(¡sc!bool)	-> SINON sm_commande(¡sc!bool) [SINON]
		 | epsilon           [LACCOLADE, TYPE, VARIABLE, NOMBRE, INTERROGATION, SI, PRINT]
